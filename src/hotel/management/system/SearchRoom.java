/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hotel.management.system;

import java.awt.EventQueue;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.*;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

import net.proteanit.sql.DbUtils;

/**
 *
 * @author METROPOLITAN
 */
public class SearchRoom extends javax.swing.JFrame {

    /**
     * Creates new form SearchRoom
     */
    public SearchRoom() {
        initComponents();
        loadRooms();
        autoSuggest();
        setTitle("Search Room");
        setResizable(false);
    }
    
    private final Vector<String> v = new Vector<String>();
    private JTextField tf;
    private boolean hide_Flag = false;
    
    void loadRooms(){
    
    String[] rooms = {"Standard Twin Room","Budget Twin Room (Fan)","Deluxe King Room (No Windows)","Deluxe King Room (Courtyard View)","Deluxe King Room (City View)",
        "Standard Queen Room (Street View)","Deluxe Twin Room (City View)","Budget Queen Room","Deluxe Twin Room (Courtyard View)"};
    
        for (int i = 0; i < rooms.length; i++) {
            v.addElement(rooms[i]);
        }
    }
    
    private void setModel(DefaultComboBoxModel md1, String str) {
    
        ComboBox1.setModel(md1);
        ComboBox1.setSelectedIndex(-1);
        tf.setText(str);
    }
    
    private static DefaultComboBoxModel getSuggestedModel(List<String> list,String text) {
    
        DefaultComboBoxModel m = new DefaultComboBoxModel();
        for (String s : list) {
            if (s. startsWith(text)) {
            m.addElement((s));
            }
            
        }
        return m;
    }
    
    void autoSuggest() {
    
        ComboBox1.setEditable(true);
        tf = (JTextField) ComboBox1.getEditor().getEditorComponent();
        tf.addKeyListener(new KeyListener() {
            
            @Override
            public void keyTyped(KeyEvent e) {
                EventQueue.invokeLater(new Runnable() {
                    
                    @Override
                    public void run() {
                        String text = tf.getText();
                        if (text.length()==0) {
                        ComboBox1.hidePopup();
                        setModel(new DefaultComboBoxModel(v), text);
                        }
                        else{
                            DefaultComboBoxModel m = getSuggestedModel(v, text);
                            
                            if (m.getSize()==0 || hide_Flag) {
                                ComboBox1.hidePopup();
                                hide_Flag = false;
                            }
                            else{
                                setModel(m, text);
                                ComboBox1.showPopup();
                            }
                        }
                    }
                });
            }

            @Override
            public void keyPressed(KeyEvent e) {
                String text = tf.getText();
                int code = e.getKeyCode();
                
                if (code==KeyEvent.VK_ENTER) {
                    
                    if (v.contains(text)) {
                        
                        v.addElement(text);
                        Collections.sort(v);
                        setModel(getSuggestedModel(v, text), text);
                    }
                    hide_Flag = true;
                }
                else if (code==KeyEvent.VK_ESCAPE) {
                    hide_Flag = true;
                }
                else if (code==KeyEvent.VK_RIGHT) {
                    for (int i = 0; i < v.size(); i++) {
                        String str = v.elementAt(i);
                        if (str.startsWith(text)) {
                        
                            ComboBox1.setSelectedIndex(-1);
                            tf.setText(str);
                            return;
                        }
                    }

                }
            }

            @Override
            public void keyReleased(KeyEvent e) {
                
            }
        });
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Label1 = new javax.swing.JLabel();
        Label2 = new javax.swing.JLabel();
        ComboBox1 = new javax.swing.JComboBox<>();
        CheckBox1 = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table1 = new javax.swing.JTable();
        ButtonBack = new javax.swing.JButton();
        ButtonSubmit = new javax.swing.JButton();
        ButtonClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Label1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        Label1.setText("Search For Room");

        Label2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Label2.setText("Room Type");

        ComboBox1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        CheckBox1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        CheckBox1.setText("Only Display Available");

        Table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Room Number", "Availability", "Cleaning Status", "Price", "Room Type"
            }
        ));
        jScrollPane1.setViewportView(Table1);

        ButtonBack.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        ButtonBack.setText("Back");
        ButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonBackActionPerformed(evt);
            }
        });

        ButtonSubmit.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        ButtonSubmit.setText("Submit");
        ButtonSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSubmitActionPerformed(evt);
            }
        });

        ButtonClear.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        ButtonClear.setText("Clear");
        ButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(Label2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(63, 63, 63)
                        .addComponent(ComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(107, 107, 107)
                        .addComponent(CheckBox1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(399, 399, 399)
                        .addComponent(Label1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(395, 395, 395)
                        .addComponent(ButtonBack)
                        .addGap(35, 35, 35)
                        .addComponent(ButtonClear)
                        .addGap(30, 30, 30)
                        .addComponent(ButtonSubmit)))
                .addContainerGap(187, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(Label1)
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Label2)
                    .addComponent(ComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CheckBox1))
                .addGap(61, 61, 61)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonBack)
                    .addComponent(ButtonSubmit)
                    .addComponent(ButtonClear))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(1118, 747));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonBackActionPerformed
        HotelReception hrec = new HotelReception();
        hrec.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_ButtonBackActionPerformed

    private void ButtonSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSubmitActionPerformed
        try {
                Class.forName("com.mysql.jdbc.Driver");
                Connection conn = DriverManager.getConnection("jdbc:mysql://localhost/projecthms","root","root");
                Statement stmt = (Statement)conn.createStatement();
                
                String str = "select * from rooms where Room_Type = '"+ComboBox1.getSelectedItem()+"'";
                String str2 = "select * from rooms where Availability = 'Available' AND Room_Type = '"+ComboBox1.getSelectedItem()+"'";
                
                try {
                    stmt.executeQuery(str);
                    stmt.executeQuery(str2);
                    ResultSet resultset = stmt.executeQuery(str);
                    
                    Table1.setModel(DbUtils.resultSetToTableModel(resultset));
                    
                    if(CheckBox1.isSelected()){
                        ResultSet resultset2 = stmt.executeQuery(str2);
                        Table1.setModel(DbUtils.resultSetToTableModel(resultset2));
                    }
                    
                    JOptionPane.showMessageDialog(null, "Room Searched Successfully");
                    this.setVisible(true);
                    
            } catch (Exception e) {
                System.out.println(e);
            }
                
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage() ,"Error", 1);
        }
    }//GEN-LAST:event_ButtonSubmitActionPerformed

    private void ButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonClearActionPerformed
       ComboBox1.setSelectedIndex(-1);
       CheckBox1.setSelected(false);
       Table1.setModel(new DefaultTableModel());
    }//GEN-LAST:event_ButtonClearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchRoom().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonBack;
    private javax.swing.JButton ButtonClear;
    private javax.swing.JButton ButtonSubmit;
    private javax.swing.JCheckBox CheckBox1;
    private javax.swing.JComboBox<String> ComboBox1;
    private javax.swing.JLabel Label1;
    private javax.swing.JLabel Label2;
    private javax.swing.JTable Table1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
